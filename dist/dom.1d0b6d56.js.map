{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","child","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText"],"mappings":"AAAAA,MAAM,CAACC,GAAP,GAAa;AACX;AACAC,EAAAA,MAFW,kBAEJC,MAFI,EAEI;AACb,QAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAlB;AACAF,IAAAA,SAAS,CAACG,SAAV,GAAsBJ,MAAM,CAACK,IAAP,EAAtB;AACA,WAAOJ,SAAS,CAACK,OAAV,CAAkBC,UAAzB;AACD,GANU;AAOXC,EAAAA,KAPW,iBAOLC,IAPK,EAOCC,KAPD,EAOQ;AACjBD,IAAAA,IAAI,CAACE,UAAL,CAAgBC,YAAhB,CAA6BF,KAA7B,EAAoCD,IAAI,CAACI,WAAzC;AACD,GATU;AAUXC,EAAAA,MAVW,kBAUJL,IAVI,EAUEC,KAVF,EAUS;AAClBD,IAAAA,IAAI,CAACE,UAAL,CAAgBC,YAAhB,CAA6BF,KAA7B,EAAoCD,IAApC;AACD,GAZU;AAaXM,EAAAA,MAbW,kBAaJC,MAbI,EAaIC,KAbJ,EAaW;AACpBD,IAAAA,MAAM,CAACD,MAAP,CAAcE,KAAd;AACD,GAfU;AAgBXC,EAAAA,IAhBW,gBAgBNT,IAhBM,EAgBAO,MAhBA,EAgBQ;AACjBlB,IAAAA,GAAG,CAACgB,MAAJ,CAAWL,IAAX,EAAiBO,MAAjB;AACAlB,IAAAA,GAAG,CAACiB,MAAJ,CAAWC,MAAX,EAAmBP,IAAnB;AACD,GAnBU;AAoBXU,EAAAA,MApBW,kBAoBJV,IApBI,EAoBE;AACX;AACA;AACAA,IAAAA,IAAI,CAACE,UAAL,CAAgBS,WAAhB,CAA4BX,IAA5B;AACA,WAAOA,IAAP;AACD,GAzBU;AA0BXY,EAAAA,KA1BW,iBA0BLZ,IA1BK,EA0BC;AACV;AACA;AACA;AACA,QAAMa,KAAK,GAAG,EAAd;AACA,QAAIC,CAAC,GAAGd,IAAI,CAACF,UAAb;;AACA,WAAOgB,CAAP,EAAU;AACRD,MAAAA,KAAK,CAACE,IAAN,CAAW1B,GAAG,CAACqB,MAAJ,CAAWV,IAAI,CAACF,UAAhB,CAAX;AACAgB,MAAAA,CAAC,GAAGd,IAAI,CAACF,UAAT;AACD;;AACD,WAAOe,KAAP;AACD,GArCU;AAsCXG,EAAAA,IAtCW,gBAsCNhB,IAtCM,EAsCAiB,IAtCA,EAsCMC,KAtCN,EAsCa;AACtB;AACA;AACA,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BpB,MAAAA,IAAI,CAACqB,YAAL,CAAkBJ,IAAlB,EAAwBC,KAAxB;AACD,KAFD,MAEO,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACjC,aAAOpB,IAAI,CAACsB,YAAL,CAAkBL,IAAlB,CAAP;AACD;AACF,GA9CU;AA+CXM,EAAAA,IA/CW,gBA+CNvB,IA/CM,EA+CAH,OA/CA,EA+CS;AAClBG,IAAAA,IAAI,CAACwB,SAAL,GAAiB3B,OAAjB;AACD;AAjDU,CAAb","file":"dom.1d0b6d56.js","sourceRoot":"../src","sourcesContent":["window.dom = {\n  // 增加\n  create(string) {\n    const container = document.createElement(\"template\");\n    container.innerHTML = string.trim();\n    return container.content.firstChild;\n  },\n  after(node, node2) {\n    node.parentNode.insertBefore(node2, node.nextSibling);\n  },\n  before(node, node2) {\n    node.parentNode.insertBefore(node2, node);\n  },\n  append(parent, child) {\n    parent.append(child);\n  },\n  wrap(node, parent) {\n    dom.before(node, parent);\n    dom.append(parent, node);\n  },\n  remove(node) {\n    //   下面这个接口有些新, IE 可能不支持\n    // node.remove();\n    node.parentNode.removeChild(node);\n    return node;\n  },\n  empty(node) {\n    // 假如调用者想获取到被清空的节点的信息, 那么下面的方法就不得行了\n    // node.innerHTML = \"\";\n    // const { childNodes } = node;\n    const array = [];\n    let x = node.firstChild;\n    while (x) {\n      array.push(dom.remove(node.firstChild));\n      x = node.firstChild;\n    }\n    return array;\n  },\n  attr(node, name, value) {\n    // 重载, 根据参数个数, 写不同的代码\n    // node.name = value;\n    if (arguments.length === 3) {\n      node.setAttribute(name, value);\n    } else if (arguments.length === 2) {\n      return node.getAttribute(name);\n    }\n  },\n  text(node, content) {\n    node.innerText = content;\n  },\n};\n"]}